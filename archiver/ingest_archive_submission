from api.ingest import IngestAPI
from archiver.archiver import ArchiveSubmission, ArchiveEntityMap, ArchiveEntity


class IngestArchiveSubmission:
    def __init__(self, ingest_api: IngestAPI):
        self.ingest_api = ingest_api
        self.submission_url = None
        self.entity_url_map = {}
        self.types = {
            'sample': 'Sample',
            'project': 'Project',
            'study': 'Study',
            'sequencingExperiment': 'SequencingExperiment',
            'sequencingRun': 'SequencingRun'
        }

    def get(self, submission_url):
        return self.ingest_api.get(self.submission_url)

    def create(self, archiveSubmission: ArchiveSubmission) -> dict:
        data = {
            'dspUuid': archiveSubmission.dsp_uuid,
            'dspUrl': archiveSubmission.dsp_url
        }

        ingest_archive_submission = self.ingest_api.create_archive_submission(data)
        self.submission_url = ingest_archive_submission['_links']['self']['href']
        return ingest_archive_submission

    def update(self, archiveSubmission: ArchiveSubmission) -> dict:
        data = {
            'dspUuid': archiveSubmission.dsp_uuid,
            'dspUrl': archiveSubmission.dsp_url
        }

        ingest_archive_submission = self.ingest_api.patch(self.submission_url, data)
        self.submission_url = ingest_archive_submission['_links']['self']['href']
        return ingest_archive_submission

    def add_entities(self, entity_map: ArchiveEntityMap):
        for entity in entity_map.get_entities():
            self.add_entity(entity)

    def add_entity(self, entity: ArchiveEntity) -> dict:
        data = {
            'type': self.types[entity.archive_entity_type],
            'dspUuid': entity.dsp_uuid,
            'dspUrl': entity.dsp_url,
            'accession': entity.accession,
            'conversion': entity.conversion,
            'metadataUuids': entity.metadata_uuids
        }
        ingest_entity = self.ingest_api.create_archive_entity(self.submission_url, data)
        ingest_url = ingest_entity['_links']['self']['href']
        self.entity_url_map[entity.dsp_uuid] = ingest_url
        return ingest_entity

    def update_entity(self, entity: ArchiveEntity) -> dict:
        data = {
            'type': self.types[entity.archive_entity_type],
            'dspUuid': entity.dsp_uuid,
            'dspUrl': entity.dsp_url,
            'accession': entity.accession,
            'conversion': entity.conversion,
            'metadataUuids': entity.metadata_uuids
        }
        ingest_entity_url = self.entity_url_map[entity.dsp_uuid]
        ingest_entity = self.ingest_api.patch(ingest_entity_url, data)
        return ingest_entity